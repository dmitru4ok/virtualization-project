---
  - name: Configure webserver VM
    gather_facts: no
    become: yes
    hosts: webserver
    vars_files:
      - ../misc/credentials.yaml
    vars:
      container_name: provider_app
      img_name: telecomm_provider
      ansible_user: "{{ webserver_vm_username }}"

    tasks:
      - name: create lock dir
        file:
          path: /var/lib/apt/lists
          state: directory
  
      - name: update
        apt:
          update_cache: yes
  
      - name: upgrade
        apt:
          upgrade: true
    
      - name: Install prerequisites for Docker
        apt:
          name:
            - ca-certificates
            - curl
          state: present
          update_cache: yes
      
      - name: Create Docker keyrings directory
        file:
          path: /etc/apt/keyrings
          state: directory
          mode: '0755'
  
      - name: Download Docker GPG key
        ansible.builtin.get_url:
          url: https://download.docker.com/linux/debian/gpg
          dest: /etc/apt/keyrings/docker.asc
          mode: '0644'
  
      - name: add docker repository
        ansible.builtin.apt_repository:
          repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian bookworm stable"
          state: present
          filename: docker
      
      - name: install docker packages
        apt:
          name:
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - python3-requests
          state: present
        
      - name: Ensure Docker runs
        systemd:
          name: docker
          state: started
          enabled: yes
  
      - name: Create project web folder
        file:
          path: ~/web
          state: directory
          mode: '0755'
  
      - name: copy web folder from ansible to webserver
        ansible.builtin.copy:
          src: ~/virtualization-project/telecomms/web/
          dest: ~/web
      
      - name: build container
        community.docker.docker_image:
          name: "{{ img_name }}"
          build:
            path: ~/web
          source: build
  
      - name: run container
        community.docker.docker_container:
          image: "{{ img_name }}"
          name: "{{ container_name }}"
          state: started
          env:
            ON_LOGIN: "{{ webserver_vm_username }}"
            ON_PASS: "{{ webserver_vm_on_pass }}"
            DB_USER: "{{ POSTGRES_USER }}"
            DB_PASSWORD: "{{ POSTGRES_PASSWORD }}"
            DB_NAME: "{{ POSTGRES_DB }}"
            DB_HOST: "{{ db_ip }}"
          ports:
            - "5000:5000"